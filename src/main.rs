//! # Application Entry Point
//!
//! This file contains the main entry point for the application and initializes the necessary components.
//!
//! ## Overview
//! - The application uses the `winit` crate to manage events and the main event loop.
//! - The `app_core::App` is instantiated and managed inside the event loop.
//! - Uncommenting the `#![windows_subsystem = "windows"]` attribute suppresses the console window on Windows platforms.
//!
//! ## Details
//! - `winit::event_loop::EventLoop` is created and configured.
//! - `winit::event_loop::EventLoop::run_app()` is used to run the application, passing the `app_core::App` instance.
//! - The control flow of the event loop is set to `Poll` mode, which means the loop will continuously poll for events rather than waiting for them synchronously.
//!
//! ## Error Handling
//! - The `main` function returns a `Result` where any errors encountered during event loop creation or execution are propagated.
//!
//! ## Usage
//! - To run the application, simply execute the binary generated by the Rust compiler.
//! - To suppress the terminal on Windows platforms, uncomment the `#![windows_subsystem = "windows"]` at the top of the file.
//!
//! ## Example
//! ```sh
//! $ cargo run --release
//! ```

// #![windows_subsystem = "windows"] // uncomment this to suppress terminal on windows

/// The main entry point of the application.
///
/// # Overview
/// This function initializes the event loop using the `winit` crate, creates an instance of 
/// `app_core::App`, and then runs the application using the event loop. The control flow of 
/// the event loop is set to `Poll` mode, which continuously polls for events.
///
/// # Returns
/// Returns `Ok(())` on successful execution of the application. Propagates any errors related to the creation
/// or execution of the event loop using `winit::error::EventLoopError`.
///
/// # Platform-Specific Notes
/// On Windows platforms, the console window can be suppressed by uncommenting the 
/// `#![windows_subsystem = "windows"]` attribute at the top of this file.
///
/// # Errors
/// If the event loop creation or application execution fails, an error of type `winit::error::EventLoopError`
/// will be returned.
///
/// # Example
/// To run the application:
/// ```sh
/// $ cargo run --release
/// ```
/// To suppress the console window on Windows:
/// Uncomment the `#![windows_subsystem = "windows"]` line at the top of this file.
fn main() -> Result<(), winit::error::EventLoopError> {
    // The event loop that drives the application by continuously polling for events.
    //
    // # Overview
    // The `event_loop` is created using the `winit::event_loop::EventLoop::builder().build()`
    // method. It is responsible for managing and delivering input events (such as window
    // events, keyboard input, and mouse input) to the application.
    //
    // # Control Flow
    // The control flow of this event loop is explicitly set to `Poll` mode. In this mode,
    // the event loop continuously polls for events, ensuring that the application remains
    // responsive. This is particularly useful for rendering applications where high frame
    // rates are important.
    //
    // # Errors
    // If an error occurs during the creation of the event loop, it will return
    // a `winit::error::EventLoopError`.
    //
    // # Platform-Specific Notes
    // On Windows platforms, suppress the console window by uncommenting the 
    // `#![windows_subsystem = "windows"]` line at the top of the file.
    let event_loop = winit::event_loop::EventLoop::builder().build()?;

    event_loop.set_control_flow(winit::event_loop::ControlFlow::Poll);

    // Represents the core application logic.
    //
    // # Overview
    // The `app` variable is an instance of `app_core::App`, which encapsulates the main
    // functionality and behavior of the application. This includes handling input events,
    // managing application state, and interfacing with the rendering pipeline.
    //
    // # Purpose
    // `app` is used to delegate event handling and rendering tasks within the event loop.
    // It provides methods for responding to input events, updating the application state,
    // and rendering frames to the screen.
    //
    // # Initialization
    // `app` is initialized using the default implementation of `app_core::App`, which sets
    // up the initial state of the application.
    //
    // # Example
    // ```rust
    // let mut app = app_core::App::default();
    // ```
    let mut app = app_core::App::default();

    event_loop.run_app(&mut app)?;

    Ok(())
}
